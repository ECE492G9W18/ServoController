/*
*********************************************************************************************************
*                                            EXAMPLE CODE
*
*                          (c) Copyright 2009-2014; Micrium, Inc.; Weston, FL
*
*               All rights reserved.  Protected by international copyright laws.
*
*               Please feel free to use any application code labeled as 'EXAMPLE CODE' in
*               your application products.  Example code may be used as is, in whole or in
*               part, or may be used as a reference only.
*
*               Please help us continue to provide the Embedded community with the finest
*               software available.  Your honesty is greatly appreciated.
*
*               You can contact us at www.micrium.com.
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*
*                                          APPLICATION CODE
*
*                                            CYCLONE V SOC
*
* Filename      : app.c
* Version       : V1.00
* Programmer(s) : JBL
* Modifications	: Nancy Minderman nancy.minderman@ualberta.ca, Brendan Bruner bbruner@ualberta.ca
* 				  Changes to this project include scatter file changes and BSP changes for port from
* 				  Cyclone V dev kit board to DE1-SoC
*********************************************************************************************************
* Note(s)       : none.
*********************************************************************************************************
*/


/*
*********************************************************************************************************
*                                            INCLUDE FILES
*********************************************************************************************************
*/

#include  <app_cfg.h>
#include  <lib_mem.h>
#include <inttypes.h>

#include  <bsp.h>
#include  <bsp_int.h>
#include  <bsp_os.h>
#include  <cpu_cache.h>

#include  <cpu.h>
#include  <cpu_core.h>

#include  <os.h>
#include  <hps.h>
#include  <socal.h>
#include  <hwlib.h>

#include <stdio.h>
#include <stdlib.h>
#include "io.h"


// Compute absolute address of any slave component attached to lightweight bridge
// base is address of component in QSYS window
// This computation only works for slave components attached to the lightweight bridge
// base should be ranged checked from 0x0 - 0x1fffff

#define FPGA_TO_HPS_LW_ADDR(base)  ((void *) (((char *)  (ALT_LWFPGASLVS_ADDR))+ (base)))
#define SERVO_PWM_0_ADDR 0x00000600
#define SERVO_PWM_0_BASE FPGA_TO_HPS_LW_ADDR(SERVO_PWM_0_ADDR)
#define SWITCH_ADD 0x00000300
#define SWITCH_BASE FPGA_TO_HPS_LW_ADDR(SWITCH_ADD)

#define APP_TASK1_PRIO 5
#define APP_TASKS_PRIO 6
//#define SW_CHK_PRIO 5

#define TASK_STACK_SIZE 4096
#define QSIZE 50;

/*
*********************************************************************************************************
*                                       LOCAL GLOBAL VARIABLES
*********************************************************************************************************
*/

CPU_STK AppTaskStartStk[TASK_STACK_SIZE];
CPU_STK Task1Stk[TASK_STACK_SIZE];
//CPU_STK CheckSwitchTaskStk[TASK_STACK_SIZE];
//OS_EVENT OSQ;
//void *OSQTable[50];

/*
*********************************************************************************************************
*                                      LOCAL FUNCTION PROTOTYPES
*********************************************************************************************************
*/

static  void  AppTaskStart (void *p_arg);
static void ServoTask (void *pdata);
static void SwitchTask (void *p_arg);

/*
*********************************************************************************************************
*                                               main()
*
* Description : Entry point for C code.
*
* Arguments   : none.
*
* Returns     : none.
*
* Note(s)     : (1) It is assumed that your code will call main() once you have performed all necessary
*                   initialisation.
*********************************************************************************************************
*/

int main ()
{
    INT8U os_err;

    BSP_WatchDog_Reset();                                       /* Reset the watchdog as soon as possible.              */

                                                                /* Scatter loading is complete. Now the caches can be activated.*/
    BSP_BranchPredictorEn();                                    /* Enable branch prediction.                            */
    BSP_L2C310Config();                                         /* Configure the L2 cache controller.                   */
    BSP_CachesEn();                                             /* Enable L1 I&D caches + L2 unified cache.             */


    CPU_Init();

    Mem_Init();

    BSP_Init();


    OSInit();

//    OSQ = *OSQCreate (OSQTable[0], 50);

    os_err = OSTaskCreateExt((void (*)(void *)) AppTaskStart,   /* Create the start task.                               */
                             (void          * ) 0,
                             (OS_STK        * )&AppTaskStartStk[TASK_STACK_SIZE - 1],
                             (INT8U           ) APP_TASKS_PRIO,
                             (INT16U          ) APP_TASKS_PRIO,  // reuse prio for ID
                             (OS_STK        * )&AppTaskStartStk[0],
                             (INT32U          ) TASK_STACK_SIZE,
                             (void          * )0,
                             (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

    if (os_err != OS_ERR_NONE) {
            ; /* Handle error. */
        }

    os_err = OSTaskCreateExt((void (*)(void *)) ServoTask,   /* Create the start task.                               */
                                (void          * ) 0,
                                (OS_STK        * )&Task1Stk[TASK_STACK_SIZE - 1],
                                (INT8U           ) APP_TASK1_PRIO,
                                (INT16U          ) APP_TASK1_PRIO,  // reuse prio for ID
                                (OS_STK        * )&Task1Stk[0],
                                (INT32U          ) TASK_STACK_SIZE,
                                (void          * )0,
                                (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

    if (os_err != OS_ERR_NONE) {
            ; /* Handle error. */
        }

//    os_err = OSTaskCreateExt((void (*)(void *)) SwitchTask,   /* Create the start task.                               */
//                                 (void          * ) 0,
//                                 (OS_STK        * )&CheckSwitchTaskStk[TASK_STACK_SIZE - 1],
//                                 (INT8U           ) SW_CHK_PRIO,
//                                 (INT16U          ) SW_CHK_PRIO,  // reuse prio for ID
//                                 (OS_STK        * )&CheckSwitchTaskStk[0],
//                                 (INT32U          ) TASK_STACK_SIZE,
//                                 (void          * )0,
//                                 (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
//
//	if (os_err != OS_ERR_NONE) {
//		; /* Handle error. */
//	}

    CPU_IntEn();

    OSStart();

}


/*
*********************************************************************************************************
*                                           App_TaskStart()
*
* Description : Startup task example code.
*
* Arguments   : p_arg       Argument passed by 'OSTaskCreate()'.
*
* Returns     : none.
*
* Created by  : main().
*
* Notes       : (1) The ticker MUST be initialised AFTER multitasking has started.
*********************************************************************************************************
*/

static  void  AppTaskStart (void *p_arg)
{

    BSP_OS_TmrTickInit(OS_TICKS_PER_SEC);                       /* Configure and enable OS tick interrupt.              */


    for(;;) {
        BSP_WatchDog_Reset();                                   /* Reset the watchdog.                                  */

        OSTimeDlyHMSM(0, 0, 0, 500);

        BSP_LED_On();

        OSTimeDlyHMSM(0, 0, 0, 1500);

        BSP_LED_Off();
    }

}

/* Prints "Hello World" and sleeps for three seconds */
static void ServoTask(void *pdata)
{
//	OS_ERR err;
//	char* msg;

	printf("servo motor task\n");

	uint32_t time = 0;
	BSP_OS_TmrTickInit(OS_TICKS_PER_SEC);
	while (1)
	{
//		msg = OSQPend(&OSQ, 0, &err);
	  //min
	  time = 28000;
	  printf("pulse: %" PRIu32 "\n", time);
	  alt_write_word(SERVO_PWM_0_BASE, time);
	  OSTimeDlyHMSM(0, 0, 3, 0);

	  //mid
	  time = 50000;
	  printf("pulse: %" PRIu32 "\n", time);
	  alt_write_word(SERVO_PWM_0_BASE, time);
	  OSTimeDlyHMSM(0, 0, 3, 0);

	  //max
	  time = 80000;
	  printf("pulse: %" PRIu32 "\n", time);
	  alt_write_word(SERVO_PWM_0_BASE, time);
	  OSTimeDlyHMSM(0, 0, 3, 0);
	}
}

static void load_motor(uint32_t block) {

	uint32_t time = 0;

	switch (block) {
	case 512:
		time = 80000;
		break;
	case 256:
		time = 50000;
		break;
	case 128:
		time = 28000;
		break;

	default:
		time = 28000;
	}

	printf("moving servo: %" PRIu32 "\n", time);

	alt_write_word(SERVO_PWM_0_BASE, time);
}

static void SwitchTask (void *p_arg) {

//	BSP_OS_TmrTickInit(OS_TICKS_PER_SEC);                       /* Configure and enable OS tick interrupt.              */
//
//	printf("switches task\n");
//	uint32_t result;
//	uint32_t old_result = -1; // impossible value
//	uint32_t delta;
//
//	while (1) {
//        result = alt_read_word(SWITCH_BASE);
//        //printf("switched: %x\n", result);
//
//        if (old_result == -1|| result != old_result) {
//
//        	if (result != old_result) {
//        		delta = abs(old_result - result);
//        		printf("delta %" PRIu32 "\n", delta);
//        	}
//
//        	char full_line[40];
//			sprintf(full_line, "Switch Reader\nSwitches : 0x%x\n", result);
//	        OSQPost(&OSQ, (void *) full_line);
//
//			old_result = result;
//        }
//
//        OSTimeDlyHMSM(0, 0, 0, 50);
//	}
}
